# Makefile Guidelines - Bliss Framework Style

## Overview
‚Ä¢ Use Makefiles for project automation and task management
‚Ä¢ Follow consistent style with informative console output
‚Ä¢ Structure with variables, organized sections, and helpful aliases
‚Ä¢ Prioritize developer experience and clarity

## File Structure

### Header
‚Ä¢ Start with project description comment
‚Ä¢ Declare .PHONY targets early
‚Ä¢ List all main phony targets in one line

### Variables Section
‚Ä¢ Define all variables at the top after .PHONY
‚Ä¢ Use descriptive UPPER_CASE names
‚Ä¢ Group related variables together
‚Ä¢ Include version, ports, image names, paths

### Target Organization
1. **help** - Always first target (default)
2. **Core targets** - Main functionality (dev, build, test)
3. **Docker targets** - Container operations
4. **Utility targets** - Clean, validate, info
5. **Workflow targets** - Setup, deployment checks
6. **Aliases** - Quick commands and shortcuts

## Naming Conventions

### Target Names
‚Ä¢ Use kebab-case: `docker-build`, `dev-setup`
‚Ä¢ Be descriptive and consistent
‚Ä¢ Group related targets with prefixes

### Variables
‚Ä¢ Use UPPER_SNAKE_CASE: `IMAGE_NAME`, `DOCKER_PORT`
‚Ä¢ Be explicit and descriptive
‚Ä¢ Include units in names if relevant: `TIMEOUT_SECONDS`

## Console Output Style

### Emojis and Formatting
‚Ä¢ Use emojis for visual clarity and personality
‚Ä¢ Common patterns:
  - üöÄ Starting/Running
  - üî® Building
  - üß™ Testing
  - üê≥ Docker operations
  - ‚úÖ Success/Complete
  - ‚ùå Error/Failed
  - üßπ Cleaning
  - üì¶ Installing/Dependencies
  - üîç Validating/Checking
  - ‚ö†Ô∏è Warning
  - üìã Information
  - üõë Stopping

### Output Messages
‚Ä¢ Start with action: "üöÄ Starting development server..."
‚Ä¢ End with result: "‚úÖ Server started at http://localhost:3000"
‚Ä¢ Use @ prefix to suppress command echo
‚Ä¢ Provide helpful next steps when relevant

## Standard Patterns

### Help Target (Always Default)
```makefile
help: ## Show this help message
	@echo "Project Name - Description"
	@echo ""
	@echo "Available targets:"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  %-15s %s\n", $$1, $$2}' $(MAKEFILE_LIST)
```

### Variables Section
```makefile
# Variables
PROJECT_NAME := my-project
VERSION := 1.0.0
DEV_PORT := 3000
DOCKER_PORT := 8080
IMAGE_NAME := $(PROJECT_NAME)
```

### Docker Targets
```makefile
docker-build: ## Build Docker image
	@echo "üê≥ Building Docker image..."
	docker build -t $(IMAGE_NAME):$(VERSION) .
	@echo "‚úÖ Docker image built: $(IMAGE_NAME):$(VERSION)"

docker-run: docker-build ## Run Docker container
	@echo "üöÄ Running Docker container on port $(DOCKER_PORT)..."
	docker run -d -p $(DOCKER_PORT):80 --name $(PROJECT_NAME) $(IMAGE_NAME):latest
	@echo "‚úÖ Container started at http://localhost:$(DOCKER_PORT)"

docker-stop: ## Stop and remove Docker container
	@echo "üõë Stopping Docker container..."
	docker stop $(PROJECT_NAME) 2>/dev/null || true
	docker rm $(PROJECT_NAME) 2>/dev/null || true
	@echo "‚úÖ Container stopped and removed"
```

### Development Targets
```makefile
dev: ## Start development server
	@echo "üöÄ Starting development server..."
	npm run dev

build: ## Build for production
	@echo "üî® Building for production..."
	npm run build
	@echo "‚úÖ Build complete in ./dist/"

test: ## Run tests
	@echo "üß™ Running tests..."
	npm test
	@echo "‚úÖ Tests completed"
```

### Utility Targets
```makefile
clean: ## Clean build artifacts
	@echo "üßπ Cleaning build artifacts..."
	rm -rf dist/ node_modules/.cache/
	@echo "‚úÖ Cleaned"

setup: install-deps ## Setup development environment
	@echo "üõ†Ô∏è Setting up development environment..."
	@echo "‚úÖ Development environment ready"

info: ## Show project information
	@echo "üìã Project Information:"
	@echo "  Name: $(PROJECT_NAME)"
	@echo "  Version: $(VERSION)"
	@echo "  Dev port: $(DEV_PORT)"
```

## Best Practices

### Error Handling
‚Ä¢ Use `|| true` for commands that might fail safely
‚Ä¢ Suppress stderr with `2>/dev/null` when appropriate
‚Ä¢ Check for required tools before using them

### Dependencies
‚Ä¢ Use target dependencies: `docker-run: docker-build`
‚Ä¢ Create logical dependency chains
‚Ä¢ Consider using order-only prerequisites when needed

### Aliases and Convenience
‚Ä¢ Provide common aliases: `run: dev`, `start: dev`
‚Ä¢ Include `setup` as alias for dependency installation
‚Ä¢ Add `stop` target for shutting down services

### Documentation
‚Ä¢ Always include ## comments for help target
‚Ä¢ Use descriptive target names that don't need explanation
‚Ä¢ Add comments for complex operations

## Example Template
```makefile
# Project Name - Description
# Brief description of what this Makefile does

.PHONY: help dev build test clean setup

# Variables
PROJECT_NAME := my-project
VERSION := 1.0.0
DEV_PORT := 3000
DOCKER_PORT := 8080

# Default target
help: ## Show this help message
	@echo "$(PROJECT_NAME) - Description"
	@echo ""
	@echo "Available targets:"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  %-15s %s\n", $$1, $$2}' $(MAKEFILE_LIST)

# Core targets
dev: ## Start development server
	@echo "üöÄ Starting development server..."
	# Your dev command here

build: ## Build for production
	@echo "üî® Building for production..."
	# Your build command here

test: ## Run tests
	@echo "üß™ Running tests..."
	# Your test command here

# Utility targets
clean: ## Clean build artifacts
	@echo "üßπ Cleaning..."
	# Your clean commands here

setup: install-deps ## Setup development environment
	@echo "üõ†Ô∏è Setting up..."
	# Your setup commands here

# Aliases
run: dev ## Alias for dev
start: dev ## Alias for dev
```

## Framework-Specific Considerations

### Node.js Projects
‚Ä¢ Use `npm` or `yarn` commands consistently
‚Ä¢ Include `install-deps` target for `npm install`
‚Ä¢ Consider `lint`, `format`, `type-check` targets

### Docker Projects
‚Ä¢ Always include build, run, stop targets
‚Ä¢ Use consistent naming for containers
‚Ä¢ Include health checks where appropriate

### Web Projects
‚Ä¢ Include development server targets
‚Ä¢ Consider build optimization targets
‚Ä¢ Include deployment-related targets

## Remember
‚Ä¢ Makefiles should make development easier, not harder
‚Ä¢ Use consistent emoji and formatting patterns
‚Ä¢ Provide helpful output messages
‚Ä¢ Test targets should be reliable and fast
‚Ä¢ Always include a helpful `help` target as default