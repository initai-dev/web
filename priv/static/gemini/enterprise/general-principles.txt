INITAI.DEV - CLAUDE CODE GENERAL PRINCIPLES
Version: 1.0.0
Last Modified: 2025-01-19
Priority: Critical

=== COMMUNICATION ===

LANGUAGE:
- user: Czech
- code/docs: English
- commits: English
- NO: mixing languages

RESPONSE:
- direct & concise
- implementation > explanation
- code first
- NO: preambles, unnecessary text

=== WORKFLOW ===

TODOWRITE TOOL:
- tasks 3+ steps
- complex implementations
- multiple files
- bug investigations

INVESTIGATE FIRST:
- search existing patterns
- check dependencies
- understand architecture
- find similar code

FOLLOW PATTERNS:
- match existing style
- use existing libraries
- maintain consistency
- NO: personal preference, new dependencies

=== CODE QUALITY ===

NEVER COMPROMISE:
- security: no hardcoded secrets
- type safety: full typing
- error handling: explicit everywhere
- testing: critical logic

ALWAYS:
- explicit > implicit
- readability > cleverness
- composition > inheritance
- pure functions > side effects

=== FILES ===

CREATE:
- ONLY when necessary
- ONLY when requested
- NO: proactive docs
- NO: unnecessary files

MODIFY:
- understand context first
- preserve formatting
- minimal changes
- NO: unrelated refactoring

=== ARCHITECTURE ===

THREE LAYERS:
IO ← → Management ← → Provider
            ↑
        Side Layer

RULES:
- providers NEVER talk to each other
- management orchestrates providers
- IO handles external
- side layer: no dependencies

PROVIDER:
- single responsibility
- return domain models
- handle own errors
- independently testable

=== ERRORS - "LET IT CRASH" ===

PHILOSOPHY:
- fail fast, fail loud
- crash > silent errors
- fix immediately > find in logs later

LAYERS:
- lower layers: expect valid input, NO re-validation
- providers: pass data as-is, NO unnecessary mapping
- errors: bubble up, NO hiding/swallowing
- logging: ONCE at top, NO double logging

PATTERN (top level only):
```
try {
    return { success: true, data: result };
} catch (error) {
    logger.error(error); // log ONCE
    return { success: false, error: error.message };
}
```

NEVER:
- validate already validated data
- create unnecessary mappers/models
- hide errors in lower layers
- log same error multiple times

=== GIT ===

COMMITS:
- feat: new feature
- fix: bug fix
- refactor: restructuring
- docs: documentation
- test: testing
- chore: maintenance

BRANCHES:
- main/prod: production
- feature/*: new features
- fix/*: bug fixes
- refactor/*: improvements

=== PERFORMANCE ===

DO:
- batch operations
- pagination
- caching
- lazy loading

DON'T:
- premature optimization
- N+1 queries
- sync blocking
- memory leaks

=== TESTING ===

PRIORITY:
1. business logic
2. data transformations
3. edge cases
4. integrations

STRUCTURE:
```
describe('Component', () => {
    it('should handle normal', () => {});
    it('should handle edge', () => {});
    it('should handle error', () => {});
});
```

=== CHECKLIST ===

BEFORE COMPLETE:
- follows patterns
- has error handling
- no hardcoded values
- tests pass
- no console.logs
- types complete
- names descriptive